{"version":3,"sources":["components/Clock.js","components/MeetingStatus.js","components/EventItems.js","components/EventGroup.js","components/MeetingList.js","MeetingDisplay.js","serviceWorker.js","index.js"],"names":["Clock","props","state","time","currentTime","i","today","Date","this","checkTime","getHours","getMinutes","intervalID","setInterval","tick","clearInterval","setState","className","React","Component","MeetingStatus","statusClass","status","toLowerCase","summary","EventItems","listItems","events","forEach","eventObject","push","key","Math","random","EventGroup","date","getFullYear","getMonth","getDate","ymd","year","parseInt","substr","month","day","objects","todayDate","now","tomorrowDate","getTime","setDate","thisWeek","setHours","setMinutes","setSeconds","setMilliseconds","todayYMD","getYMD","tomorrowYMD","name","groupName","yMDToDate","getDay","d","nth","MeetingList","list","Object","keys","id","MeetingDisplay","backendUrl","tickRate","timerID","datesAreOnSameDay","first","second","eventsList","fetch","response","json","data","currentEvent","find","event","start_date","parse","start","end_date","end","nextEvent","generateSummary","generateEventsList","summaryString","eventDate","eventToday","eventTomorrow","eventTime","eventDay","struct","eventStartDate","eventEndDate","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ef83d83d.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Clock extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            time: this.currentTime()\n        };\n    }\n\n    checkTime(i) {\n        return (i < 10) ? \"0\" + i : i;\n    }\n\n    currentTime() {\n        let today = new Date(),\n            h = this.checkTime(today.getHours()),\n            m = this.checkTime(today.getMinutes());\n\n        return h + \":\" + m;\n    }\n\n    componentDidMount() {\n        this.intervalID = setInterval(\n            () => this.tick(),\n            1000\n        );\n    }\n    componentWillUnmount() {\n        clearInterval(this.intervalID);\n    }\n    tick() {\n        this.setState({\n            time: this.currentTime()\n        });\n    }\n    render() {\n        return (\n            <span className=\"clock\">\n          {this.state.time}\n        </span>\n        );\n    }\n}\n\nexport default Clock;\n","import React from \"react\";\nimport Clock from './Clock';\n\nclass MeetingStatus extends React.Component {\n    render() {\n        let statusClass = \"status status-\"+this.props.status.toLowerCase()\n\n        return (\n            <header className=\"meeting-status\">\n                <div className={statusClass}></div>\n                <h1>{this.props.status}</h1>\n                <p>{this.props.summary}</p>\n                <h2><Clock></Clock></h2>\n            </header>\n        )\n    }\n}\n\nexport default MeetingStatus;","import React from \"react\";\n\nclass EventItems extends React.Component {\n    render() {\n        let listItems = []\n\n        this.props.events.forEach((eventObject) => {\n            listItems.push(<li key={eventObject.time + Math.random()}><span>{eventObject.time}</span>{eventObject.summary}</li>)\n        })\n\n        return (\n            <ul>\n                {listItems}\n            </ul>\n        )\n    }\n}\n\nexport default EventItems\n","import React from \"react\";\nimport EventItems from './EventItems.js'\n\nclass EventGroup extends React.Component {\n    getYMD(date) {\n        return `${this.checkTime(date.getFullYear())}${this.checkTime(date.getMonth())}${this.checkTime(date.getDate())}`\n    }\n\n    checkTime(i) {\n        return (i < 10) ? \"0\" + i : i;\n    }\n\n    yMDToDate(ymd) {\n        let year = parseInt(ymd.substr(0, 4))\n        let month = parseInt(ymd.substr(4, 2))\n        let day = parseInt(ymd.substr(6))\n\n        return new Date(year, month, day, 0, 0, 0, 0)\n    }\n\n    render() {\n        let objects = []\n\n        const todayDate = new Date(Date.now())\n        const tomorrowDate = new Date(todayDate.getTime())\n        tomorrowDate.setDate(todayDate.getDate() + 1)\n        const thisWeek = new Date(todayDate.getTime())\n        thisWeek.setDate(todayDate.getDate() + 7)\n        thisWeek.setHours(0)\n        thisWeek.setMinutes(0)\n        thisWeek.setSeconds(0)\n        thisWeek.setMilliseconds(0)\n\n        const todayYMD = this.getYMD(todayDate)\n        const tomorrowYMD = this.getYMD(tomorrowDate)\n\n        let name = this.props.name\n\n        if (name === tomorrowYMD) {\n            objects.push(<h3 key=\"Tomorrow\">Tomorrow</h3>)\n        } else if(name !== todayYMD) {\n            let date = this.yMDToDate(name)\n            let groupName;\n\n            if (date.getTime() < thisWeek.getTime()) {\n                const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n                groupName = daysOfWeek[date.getDay()]\n            } else {\n                const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n\n                const nth = function(d) {\n                    if (d > 3 && d < 21) return 'th';\n                    switch (d % 10) {\n                        case 1:  return \"st\";\n                        case 2:  return \"nd\";\n                        case 3:  return \"rd\";\n                        default: return \"th\";\n                    }\n                }\n\n                groupName = `${date.getDate()}${nth(date.getDate())} ${months[date.getMonth()]}`;\n            }\n\n            objects.push(<h3 key={groupName}>{groupName}</h3>)\n        }\n\n        const events = this.props.events\n        objects.push(<EventItems key={name+'Events'} events={events}></EventItems>)\n\n        return (\n            <div>\n                {objects}\n            </div>\n        )\n    }\n}\n\nexport default EventGroup\n","import React from \"react\";\nimport EventGroup from './EventGroup.js';\n\nclass MeetingList extends React.Component {\n    render() {\n        let objects = []\n\n        let list = this.props.list\n        if (list) {\n            let groupNames = Object.keys(this.props.list)\n            groupNames.forEach((groupName) => {\n                objects.push(<EventGroup key={groupName} name={groupName} events={this.props.list[groupName]}></EventGroup>)\n            })\n        }\n\n        return (\n            <section id=\"timeline\">\n                {objects}\n            </section>\n        )\n    }\n}\n\nexport default MeetingList\n","import React from 'react';\nimport './MeetingDisplay.css';\nimport MeetingStatus from './components/MeetingStatus.js';\nimport MeetingList from './components/MeetingList.js'\n\nclass MeetingDisplay extends React.Component {\n    backendUrl = \"http://localhost:4567\";\n    tickRate = 10000\n    timerID = null\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            status: \"Updating\",\n            summary: \"Please wait...\",\n            eventsList: {}\n        }\n    }\n\n    componentDidMount() {\n        this.timerID = setInterval(() => this.tick(), this.tickRate)\n        this.tick()\n    }\n\n    componentWillUnmount() {\n        this.timerID = null\n    }\n\n    async tick() {\n        const response = await fetch(this.backendUrl);\n        const data = await response.json();\n\n        const events = data[\"events\"];\n\n        let now = Date.now();\n        const currentEvent = events.find((event) => {\n            let start_date = Date.parse(event.start);\n            let end_date = Date.parse(event.end);\n\n            return (start_date < now && end_date > now)\n        })\n        const nextEvent = events.find((event) => {\n            let start_date = Date.parse(event.start);\n\n            return start_date > now\n        })\n        const status = (currentEvent == null) ? 'Available' : 'Busy'\n        const summary = this.generateSummary(status, nextEvent);\n        const eventsList = this.generateEventsList(events);\n\n        this.setState({\n            status: status,\n            summary: summary,\n            eventsList: eventsList\n        })\n    }\n\n    generateSummary(status, nextEvent) {\n        if(nextEvent == null)\n            return \"\"\n\n        let summaryString = (status === 'Available') ? 'Next meeting ' : 'Next free '\n\n        const now = new Date(Date.now())\n        const tomorrowDate = new Date(now.getTime())\n        tomorrowDate.setDate(now.getDate() + 1)\n        const eventDate = new Date(Date.parse(nextEvent.start))\n        const eventToday = this.datesAreOnSameDay(now, eventDate)\n        const eventTomorrow = this.datesAreOnSameDay(tomorrowDate, eventDate)\n        const eventTime = `${this.checkTime(eventDate.getHours())}:${this.checkTime(eventDate.getMinutes())}`\n\n        const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n        const eventDay = daysOfWeek[eventDate.getDay()]\n\n        if(eventTomorrow)\n            summaryString += 'tomorrow '\n\n        if(!eventToday && !eventTomorrow)\n            summaryString += `on ${eventDay} `\n\n        summaryString += `at ${eventTime}`\n\n        return summaryString\n    }\n\n    datesAreOnSameDay = (first, second) =>\n        first.getFullYear() === second.getFullYear() &&\n        first.getMonth() === second.getMonth() &&\n        first.getDate() === second.getDate();\n\n    generateEventsList(events) {\n        const todayDate = new Date(Date.now())\n        const tomorrowDate = new Date(todayDate.getTime())\n        tomorrowDate.setDate(todayDate.getDate() + 1)\n\n        let struct = {\n        }\n\n        events.forEach((event) => {\n            const eventStartDate = new Date(Date.parse(event.start))\n            const eventEndDate = new Date(Date.parse(event.end))\n            const ymd = this.getYMD(eventStartDate)\n\n            const timeString = `${this.checkTime(eventStartDate.getHours())}:${this.checkTime(eventStartDate.getMinutes())} - ${this.checkTime(eventEndDate.getHours())}:${this.checkTime(eventEndDate.getMinutes())}`\n            const eventObject = { time: timeString, summary: event.summary }\n\n            struct[ymd] = struct[ymd] || []\n\n            struct[ymd].push(eventObject)\n        })\n\n        return struct\n    }\n\n    getYMD(date) {\n        return `${this.checkTime(date.getFullYear())}${this.checkTime(date.getMonth())}${this.checkTime(date.getDate())}`\n    }\n\n    checkTime(i) {\n        return (i < 10) ? \"0\" + i : i;\n    }\n\n    render() {\n        return (\n            <div id=\"App\">\n                <MeetingStatus status={this.state.status} summary={this.state.summary}></MeetingStatus>\n                <MeetingList list={this.state.eventsList}></MeetingList>\n            </div>\n        )\n    }\n}\n\nexport default MeetingDisplay;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MeetingDisplay from './MeetingDisplay';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MeetingDisplay />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}